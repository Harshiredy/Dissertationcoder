library(readr)
dataset <- read_csv("C:/Users/User/Downloads/data-2.csv")

str(dataset)

summary(dataset$Quantity)
summary(dataset$UnitPrice)

total_revenue <- sum(dataset$Quantity * dataset$UnitPrice)
total_revenue

unique_countries <- unique(dataset$Country)
unique_countries

top_products <- head(sort(table(dataset$Description), decreasing = TRUE), 5)
top_products

quantity_sold <- tapply(dataset$Quantity, dataset$Description, sum)
quantity_sold

hist(dataset$Quantity, breaks = 20, col = "lightblue", xlab = "Quantity", main = "Distribution of Quantity Sold")

revenue_by_country <- tapply(dataset$Quantity * dataset$UnitPrice, dataset$Country, sum)
barplot(revenue_by_country, main = "Revenue by Country", xlab = "Country", ylab = "Revenue")


library(ggplot2)

# Calculate quantity sold per product
quantity_sold <- aggregate(Quantity ~ Description, dataset, sum)

# Create bar chart
ggplot(quantity_sold, aes(x = Description, y = Quantity)) +
  geom_bar(stat = "identity", fill = "lightblue") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "Product Description", y = "Quantity Sold", title = "Quantity Sold per Product")



# Convert InvoiceDate to date format
dataset$InvoiceDate <- as.Date(dataset$InvoiceDate, format = "%m/%d/%Y %H:%M")

# Calculate daily revenue
daily_revenue <- aggregate(Quantity * UnitPrice ~ InvoiceDate, dataset, sum)

# Create line chart
ggplot(daily_revenue, aes(x = InvoiceDate, y = `Quantity * UnitPrice`)) +
  geom_line(color = "blue") +
  labs(x = "Date", y = "Revenue", title = "Daily Revenue Trend") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))




library(ggplot2)

# Calculate revenue by country
revenue_by_country <- aggregate((Quantity * UnitPrice) ~ Country, dataset, sum)

# Rename the column
colnames(revenue_by_country)[2] <- "Revenue"

# Sort the data in descending order of revenue
revenue_by_country <- revenue_by_country[order(-revenue_by_country$Revenue), ]

# Create pie chart
ggplot(revenue_by_country, aes(x = "", y = Revenue, fill = Country)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y") +
  labs(x = NULL, y = NULL, fill = "Country", title = "Revenue Proportion by Country") +
  theme_void() +
  theme(legend.position = "right")




library(ggplot2)

# Convert InvoiceDate to a proper date format
dataset$InvoiceDate <- as.POSIXct(dataset$InvoiceDate, format = "%m/%d/%Y %H:%M")

# Calculate daily revenue
daily_revenue <- aggregate((dataset$Quantity * dataset$UnitPrice), by = list(Date = as.Date(dataset$InvoiceDate)), FUN = sum)

# Plot daily revenue trend
ggplot(daily_revenue, aes(x = Date, y = x)) +
  geom_line(color = "blue") +
  labs(x = "Date", y = "Revenue", title = "Daily Revenue Trend") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Identify top-selling products
top_products <- aggregate(dataset$Quantity, by = list(Product = dataset$Description), FUN = sum)
top_products <- top_products[order(-top_products$x), ]
top_products <- head(top_products, 5)

# Plot top-selling products
ggplot(top_products, aes(x = Product, y = x)) +
  geom_bar(stat = "identity", fill = "lightblue") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "Product", y = "Quantity Sold", title = "Top-selling Products")

# Calculate and visualize revenue by country
revenue_by_country <- aggregate((dataset$Quantity * dataset$UnitPrice), by = list(Country = dataset$Country), FUN = sum)
revenue_by_country <- revenue_by_country[order(-revenue_by_country$x), ]

ggplot(revenue_by_country, aes(x = Country, y = x)) +
  geom_bar(stat = "identity", fill = "lightblue") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "Country", y = "Revenue", title = "Revenue by Country")

library(dplyr)

# Analyze customer behavior
unique_customers <- dataset %>%
  distinct(CustomerID) %>%
  nrow()

orders_per_customer <- dataset %>%
  group_by(CustomerID) %>%
  summarise(Orders = n_distinct(InvoiceNo))

average_orders_per_customer <- mean(orders_per_customer$Orders)

# Print summary
cat("Number of unique customers:", unique_customers, "\n")
cat("Average orders per customer:", average_orders_per_customer, "\n")


library(corrplot)


# Calculate correlation matrix
correlation_matrix <- cor(dataset[, c("Quantity", "UnitPrice", "CustomerID")])

# Visualize correlation matrix
library(corrplot)
corrplot(correlation_matrix, method = "color", type = "upper", tl.col = "black", tl.srt = 45)


# Load necessary libraries
library(dplyr)
library(caret)
library(glmnet)

# Data preprocessing

# Create a binary target variable for repeat purchase
dataset$RepeatPurchase <- ifelse(dataset$Quantity > 10, 1, 0)

# Split the data into training and testing sets
set.seed(123)
trainIndex <- createDataPartition(dataset$RepeatPurchase, p = 0.8, 
                                  list = FALSE,
                                  times = 1)
trainData <- dataset[trainIndex, ]
testData <- dataset[-trainIndex, ]

# Build a logistic regression model
model <- glm(RepeatPurchase ~ Quantity + UnitPrice + Country, data = trainData, family = "binomial")

# Make predictions on the test set
predictions <- predict(model, newdata = testData, type = "response")

# Convert predicted probabilities to binary predictions
predicted_classes <- ifelse(predictions > 0.5, 1, 0)

# Calculate accuracy
accuracy <- sum(predicted_classes == testData$RepeatPurchase) / length(testData$RepeatPurchase)
cat("Accuracy:", accuracy, "\n")

# logistic regression accuracy score visualization

# Create a confusion matrix
conf_matrix <- table(Actual = testData$RepeatPurchase, Predicted = predicted_classes)

# Plot the confusion matrix
library(ggplot2)
conf_matrix_plot <- as.data.frame(conf_matrix)
ggplot(data = conf_matrix_plot, aes(x = Actual, y = Predicted)) +
  geom_tile(aes(fill = Freq), color = "white") +
  geom_text(aes(label = Freq)) +
  theme_minimal() +
  labs(title = "Confusion Matrix",
       x = "Actual",
       y = "Predicted")

# Load necessary library for ROC curve
library(pROC)

# Calculate ROC curve
roc_curve <- roc(testData$RepeatPurchase, predictions)

# Plot ROC curve
plot(roc_curve, main = "ROC Curve")


# decision Tree classification 

library(readr)
library(datasets)
library(caTools)
library(party)
library(dplyr)
library(magrittr)
data_2 <- read_csv("C:/Users/User/Downloads/data-2.csv")
View(data_2)
library(dplyr)


library(tidymodels)
library(tidyr)

df = subset(data_2, select = -c(InvoiceNo,StockCode, InvoiceDate, Description) )


set.seed(123)
data_split <- initial_split(df, prop = 0.75)
train_data <- training(data_split)
test_data <- testing(data_split)


tree_spec <- decision_tree() %>%
  set_engine("rpart") %>%
  set_mode("regression")


tree_fit <- tree_spec %>%
  fit(UnitPrice ~ ., data = train_data)


predictions <- tree_fit %>%
  predict(test_data) %>%
  pull(.pred)

metrics <- metric_set(rmse, rsq)
model_performance <- test_data %>%
  mutate(predictions = predictions) %>%
  metrics(truth = UnitPrice, estimate = predictions)

print(model_performance)


library(rpart.plot)

# Plot the decision tree
rpart.plot(tree_fit$fit, type = 4, extra = 101, under = TRUE, cex = 0.8, box.palette = "auto")



rules <- rpart.rules(tree_fit$fit)
print(rules)

# Variable importance plot
var_importance <- vip::vip(tree_fit, num_features = 10)
print(var_importance)


table_mat <- table(test_data$UnitPrice, predictions)
table_mat

accuracy <- sum(diag(table_mat)) / sum(table_mat)

print(paste('Accuracy', accuracy))


